<!-- copied from:
http://www.leonardoborges.com/writings/2009/07/01/jruby-on-rails-and-legacy-java-apps-managing-dependencies/ -->
<project
   xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 <modelVersion>4.0.0</modelVersion>

 <groupId>com.soundcloud.uml-generator</groupId>
 <!-- notice how we specify the packaging to be a war, that way, maven knows where to copy the jar files -->
 <packaging>war</packaging>
 <version>1.0</version>
 <artifactId>UmlGenerator</artifactId>
 <name>UmlGenerator</name>
 <dependencies>
  <dependency>
    <groupId>net.sourceforge.plantuml</groupId>
    <artifactId>plantuml</artifactId>
    <version>LATEST</version>
  </dependency>
 </dependencies>
 <build>
   <finalName>UmlGenerator</finalName>
   <plugins>
   <plugin>
     <groupId>org.codehaus.mojo</groupId>
     <artifactId>exec-maven-plugin</artifactId>
     <executions>
       <execution>
         <!-- This tasks only creates a basic structure expected by maven, so it can do its work -->
         <id>create-mock-web-descriptor</id>
         <phase>compile</phase>
         <configuration>
           <executable>/bin/sh</executable>
           <workingDirectory>.</workingDirectory>
           <arguments>
             <argument>-c</argument>
             <argument>
               mkdir -p src/main/webapp/WEB-INF
               touch    src/main/webapp/WEB-INF/web.xml
             </argument>
           </arguments>
         </configuration>
         <goals>
           <goal>exec</goal>
         </goals>
       </execution>
       <execution>
       <!-- Now in the package phase we copy the jar files that maven put into the fake web app to our rails' lib folder -->
         <id>copy-needed-jars-into-lib</id>
         <phase>package</phase>
         <configuration>
           <executable>/bin/sh</executable>
           <workingDirectory>.</workingDirectory>
           <arguments>
             <argument>-c</argument>
             <argument>
               rm -f lib/*.jar
               cp target/UmlGenerator/WEB-INF/lib/*.jar lib
               rm -rf target/UmlGenerator*
               rm -rf src
             </argument>
           </arguments>
         </configuration>
         <goals>
           <goal>exec</goal>
         </goals>
       </execution>
     </executions>
   </plugin>
  </plugins>
 </build>
</project>
