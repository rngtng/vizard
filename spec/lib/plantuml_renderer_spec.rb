# frozen_string_literal: true

require './lib/plantuml_renderer'

RSpec::Matchers.define :match_bytes do |expected|
  def buyes_to_string(data)
    data.bytes.to_a.map { |byte| byte.to_s(16) }.join
  end

  match do |actual|
    expect(buyes_to_string(actual)).to eq(expected)
  end

  failure_message do |actual|
    'expected: ' + buyes_to_string(actual)
  end

  description do
    'bytes matches'
  end
end

describe PlantumlRenderer do
  describe '#decorate' do
    let(:data) { 'test' }
    subject { PlantumlRenderer.decorate(data) }

    it { is_expected.to eq("@startuml\n #{PlantumlRenderer::DEFAULTS} test\n @enduml") }

    context 'already decorated' do
      let(:data) { PlantumlRenderer.decorate('test') }

      it { is_expected.to eq(data) }
    end
  end

  describe '#render' do
    let(:data) { 'Bob -> Alice : hello' }
    let(:format) { :png }

    subject { PlantumlRenderer.render(data, format) }

    it { is_expected.to match_bytes('89504e47da1aa000d49484452000780007e82000605f42980002974455874636f70796c656674047656e65726174656420627920687474703a2f2f706c616e74756d6c2e636f6d1130391c001a869545874706c616e74756d6c01000789c9592cd4ee3301485f796fae576238b4476fa439b522294a9938a8aedd8edce412ac3a7671eceddccb38f438baa424730b11229f639df3dbef67563b9b1ae961d21dd2ac845a73c36b68f0c5a12a303146ff1e6ba9d9c75b1bc64fd53aa5c3cf95761aa4d89e6fb725eac2aa39d2af7962ceb7629ed9053a699cf29ab1e6ca1e9519bf3d5f393e567a779ddc7361b5f9668d9df67fe8a97e3d62539a2459f62fe547722eaa679b4a87c770a5ed71f3b3a81d9f249f1abe97f9d34ff512822b48a4281062784629b59fbe4655be5df3293be918fd31c36681aa115b030a26c14d2fef99c5b48d6622a6c10f7fa717708f3fc7d0ae5f90f3bb59e8d76c6834bd1582396ce7ac0599f0d877a7aca83186fb35aac9cd8ff79b8551b61b4aa515932594cf82412f488585391a1f516d31d67b18b15fb5cc390fe8a5814c5dfb5d5216b03f252e478eb53fc473cb7425530df3616eb18fc6d74afe47e7e80f4c251c8a27e20db9595b0e469fb893d6a72a74e9bdb1df6116c49ce55e578e5f3a32263df5b6bb631282725f9b5a691e2a4d9d978c007194944415478daed9d6d48545918c7277b51a157689db1177247d2224a28917c9d5a34db85111792e843f9cd204a3f653316d1872ccb865012642b58a1b099cd5e484c4b131b251830aa695a72b75da9d65d5917dd9468dbffcea5c3a0f372a766eebdcefcffcc3b9e7de33f3ccef3ee739e7ccbd338fee3a588744440d0b11faa1aa92ff11e6a4644dd04adfa768f7a8a7a7c7e974baddeec1c1c19191118d83e6cb346415ff1a8a5a55a6f7f5f5c1eea1a1218d83e6cb346415ff4a8a9a9c96eb7c36ef881c44e3a03dbac51d0173ea76c347d01f76634e3ab0cd1a57dd92318d1f417f8483a0276a1c74609b93aea40eb743a8d801696846492d2a0755e9a3367ced2a54b4b4a4a3a3a3ab49baa2a2246eedfbf7f5a821665c4fbe6e6e6a2a2a28d1b376a13745a5a9ad96cc6f3275ba29d092e0ce99962f3d0a143cb962d9b356b169e2b2b2bbd1b62d7f2e5cbb1bfda0aaaa2ad2a031fa67646448b851eecd1a74f9f5ebd7a35dcdf6030e0dc78d7a3b9d477cbcaca7a7b7bd5f1689bcd565c5c2c3cfae4c993494949f5f5f55d5d5d784619868a86c9c9c9dddd875fefc797c9e73e7ce45143462daf1e3c7513870e0c0ce9d3b380aeadad5dbc78f1993367601b66c1858585527d6363e3ca952bf1dcdddd8dfaacacacbd7bf7aa10a32581e6cd9b37a5bdebd6ad3b75ea943818dc259f921aae810e5bbf7e7de4403b1cea3d1f8e0c13a9cfe9f57ad4f83db34f9c3831f545e040972e5d129bb76edd428f54c1a3f131f08a9b366ddabe7dbb54337ffe7cef811165d4888677efdef5b92b12a0718e4b4b4bc5667e7e7e4d4d8d3fd0f1f1f13ec7f385b17c67dd48c1933703caaac5e8d6d6d679f3e669d744e4ecea49e979b9bebff424b385109a6fdfbead95c110a62c58b040f441e138527c502574b4b5b5cd9d3b17157d4747676a2e6ce9d3b3e416fd8b0a1baba7aeaebc0f8837faaf5a84e93c9243a2c46398c7562c4f31ec972c59e23d185aadd6881c6f459c6842555d2847a2a68d88391e6ecd9b3936c3baba3a38fb91234760c0fdfbf7b1999d9dadc260284dd476efde8d41591c017c0c46ee6cc9953a7776217885b2c96c84def30213944995a89126d43ea777f068ec9d3d7bf624dbe01999999989898988e328602ac5ef3af85d74113344113344113344113344113344113745841fff5519d9d9d376edcb0d96c57af5ebdae94e48356d74ef9367bf3f1add0c8df1129795951cd05ab0538ecdc141f7f4f4b4b4b43435355d504341ef54d2889d416deedae974e2e4d8ed76b4bfa8ace4dc7ba753be5d81c1c34fcbfafaff2d7196ae282b3977936ac14e3936778dd38236383fe8bed21cafc6379fb6748cefdd161b1332cd67ee2fdd142381a676cd1071dc21eaab56bdfb338477c4fbe2dd61c3f8f878e4ecc8bb5816d8eecafb2729e7e318d7e3815516b99aa095abebe1faa9e46a0236a2d7f39abf62f67298226688a836194f869cde1134411334414fbfc150a7bed7dc5f1a1368cf595a1364147e13c9aa093aea40d7d7d7af58b1222121212b2bebd1a34752fdfbf7ef8f1d3b969292b268d1a23d7bf68c8e8efa33d3e3e5e5e5e6e3018f47a3da41afbfc4e8ca10bc4c26d3c0c00501e3d7a343b3b5baaafa9a9d9b265cb8b172f86878777edda555151e1fb4d96cdeba75ebaf1ee5e5e5592c16aec7d837ef5ea95541e1b1b4b4c4c94caab56ad72b95c52f9f5ebd770797fa08d46e3e3c78fa5323a446a6a2ae7d1c163b4d8471ef5f7dc5c5c5f938d98f3f6ed5ba98c23693a4d0e9e9e93eef48a2478719746d6d2d22ef93274f262626fafbfb77ecd8e1f746565a588d19b376f3e7cf83057862180c6acc36ab52252c7c7c7af5dbbf6dab56bfe40235cecdbb74fef11a228c7065a89a7e7f3778efefeb13ffaa3cff8b892b2c0fdad3bbdee4dd52f136e828eac9a871bbe762521a97fd5cd83e6257dec163e89a2158e7baf47898dc6bb63d332aece0b175cdf07fd64fdf06b3cb6b953b9e7de9ede0d37b65a8f1479ecb90eb32989eaf718e75f3a4bd8d436d28cd02121fec69d56fc3ce3bbe7193ffc61fdf3dd9bfbc94155eca7894fc9499ff2cc5f25b69ef684794afcd5a29cf734d9db85a37f65a8b0faff7160dc9beac25c19867965681b6ef4e9c29c4747a189aa097afaaec55b496b784711e4dd044dd0b1a9a8321a7779c47c71ae897aa4afe778a9197d226875ffda4c3e68edfc1d1b4113b47f3115aa42622a5485c454a8a89a950f927b0fcb75d8296c454a8a181662a54e5408b3253a12a45a1253a12ae1d14c85aa448c662a54853c9aa950158dd14c85aa1068a642552e743015ea43a64215622a547ed741d044dd044dd044dd044dd044dd04ad49d022cb96c3e1c032ff9e475d4a493e6875ed946f3353a132152a53a132152a53a1c66a2ad48a515d59a9deaa7428d505a51add9a97e2a548aa093a4af51ffbf2c4ed4e14627000049454e44ae426082') }

    context 'format is txt' do
      let(:format) { :txt }

      it { is_expected.to eq("     ,---.          ,-----.\n     |Bob|          |Alice|\n     `-+-'          `--+--'\n       |    hello      |   \n       |-------------->|   \n     ,-+-.          ,--+--.\n     |Bob|          |Alice|\n     `---'          `-----'\n") }
    end
  end
end
